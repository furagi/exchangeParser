// Generated by CoffeeScript 1.6.3
(function() {
  var RatesCollectioner,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RatesCollectioner = (function() {
    function RatesCollectioner() {
      this._getRates = __bind(this._getRates, this);
    }

    RatesCollectioner.prototype.start = function(sources, interval, base, currencys) {
      return this._tID = setInterval(this._getRates, interval);
    };

    RatesCollectioner.prototype.stop = function() {
      return clearInterval(this._tID);
    };

    RatesCollectioner.prototype.restart = function(sources, interval, base, currencys) {
      this.stop(this._tID);
      return start(sources, interval, base, currencys);
    };

    RatesCollectioner.prototype._getRates = function(sources) {
      var getterInfo, limit, ratesCollection, sendRates, source, _results;
      ratesCollection = {};
      limit = 0;
      sendRates = this._sendRates;
      _results = [];
      for (source in sources) {
        getterInfo = sources[source];
        limit++;
        _results.push((function(source, getterInfo) {
          var getter,
            _this = this;
          getter = new getterInfo['class'];
          getter.on('error', function(err) {
            return console.log(source + ': ' + err);
          });
          getter.on('end', function(rates) {
            ratesCollection[source] = rates;
            getter = null;
            limit--;
            if (!limit) {
              return sendRates(res, base, cur, ratesCollection);
            }
          });
          return getter.getRates(base, cur, getterInfo.key);
        })(source, getterInfo));
      }
      return _results;
    };

    RatesCollectioner.prototype._updateRates = function(base, currencys, collection) {
      var cur, data, info, rate, ratesCollection, source, sources, _ref;
      console.log(collection);
      data = {};
      data.base = base;
      data.error = false;
      data.errors = {};
      ratesCollection = {};
      sources = [];
      for (source in collection) {
        info = collection[source];
        sources.push(source);
        if (info.error) {
          data.error = true;
          data.errors[source] = info.descriptions;
        }
        _ref = info.rates;
        for (cur in _ref) {
          rate = _ref[cur];
          if (ratesCollection[cur] == null) {
            ratesCollection[cur] = {};
          }
          ratesCollection[cur][source] = rate;
        }
      }
      data.ratesCollection = ratesCollection;
      data.sources = sources;
      return res.send(data);
    };

    return RatesCollectioner;

  })();

}).call(this);
